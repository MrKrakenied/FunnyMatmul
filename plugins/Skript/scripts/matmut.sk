#
# Employees:
# - PinkLolicorn (https://github.com/PinkLolicorn)
# - Dzikoysk (https://github.com/dzikoysk)
# - Micha≈Ç Kubik (https://github.com/bopke)
# - MrKrakenied (https://github.com/MrKrakenied)
#
# {{ u can join us D: }}
#

function matgen(n: number) :: vectors: 
	# send "matgen started, _n = %{_n}%" to console

	set {_tmp} to 1.0 / {_n} / {_n}
	# send "_tmp = %{_tmp}%" to console

	loop {_n} times:
		loop {_n} times:
			set {_index_1} to (loop-number-1) - 1.0
			set {_index_2} to (loop-number-2) - 1.0
			# send "index 1, index 2 = %{_index_1}%, %{_index_2}%" to console
			
			set {_a::%{_index_1}%n%{_index_2}%} to (({_tmp} * 1.0) * ({_index_1} - {_index_2})) * ({_index_1} + {_index_2})
			# send "_val = %{_a::%{_index_1}%::%{_index_2}%} * 1.0%" to console
	
	# how the duck we can return this variable 
	send "%{_a::*}%" to console
	return {_a::*}


function matmul(a: objects, b: objects) :: objects:
	send "matmmul started" to console

	set {_m} to size of {_a::*}
	set {_nk} to "%first element of {_a::*}%"
	set {_n} to size of {_a::%{_nk}%::*}
	set {_pk} to "%first element of {_b::*}%"
	set {_p} to size of {_a::%{_pk}%::*}

	loop {_n} times:
		loop {_p} times:
			set {_index_1} to (loop-number-1) - 1.0
			set {_index_2} to (loop-number-2) - 1.0

			set {_c::%{_index_2}%::%{_index_1}%} to {_b::%{_index_1}%::%{_index_2}%}
			send "_val = %{_c::%{_index_2}%::%{_index_1}%} * 1.0%" to console
			
	loop {_m} times:
		loop {_p} times:
			set {_s} to 0.0
			loop {_n} times:
				set {_af1} to {_a::%loop-number-1%::%loop-number-3%}
				set {_af2} to {_c::%loop-number-2%::%loop-number-3%}
				set {_s} to {_s} + ({_af1} * {_af2})
			set {_x::%loop-number-1%::%loop-number-2%} to {_s}
			send "%{_s}%" to console

	return {_x::*}


command /matmul:
	trigger:
		send "so we count" to console
		set {_n} to 2

		set {_a::*} to matgen({_n})
		# waiting for result
		set {_b::*} to matgen({_n})
		
		set {_x::*} to matmul({_a::*}, {_b::*})
		set {_pos} to ({_n} / 2)

		send "done: %{_x::%{_pos}%::%{_pos}%}%" to console
